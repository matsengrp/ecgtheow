<?xml version="1.0" standalone="yes"?>

<!-- Generated by BEAUTi v1.8.4                                              -->
<!--       by Alexei J. Drummond, Andrew Rambaut and Marc A. Suchard         -->
<!--       Department of Computer Science, University of Auckland and        -->
<!--       Institute of Evolutionary Biology, University of Edinburgh        -->
<!--       David Geffen School of Medicine, University of California, Los Angeles-->
<!--       http://beast.bio.ed.ac.uk/                                        -->
<beast>

	<!-- The list of taxa to be analysed (can also include dates/ages).          -->
	<!-- ntax={{ id_seq|length }}                                                                -->
	<taxa id="taxa">
	{% for key, value in id_seq.iteritems() %}
	  <taxon id="{{ key }}"/>
	{% endfor %}
	</taxa>
	<taxa id="ingroup">
	{% for key, value in id_seq.iteritems() if key != naive %}
	  <taxon idref="{{ key }}"/>
	{% endfor %}
	</taxa>

	<!-- The sequence alignment (each sequence refers to a taxon above).         -->
	<!-- ntax={{ id_seq|length }} nchar={{ id_seq[naive]|length }}                                                      -->
	<alignment id="alignment" dataType="nucleotide">
	{% for key, value in id_seq.iteritems() %}
		<sequence{{ " id='" ~ key ~ "seq'" if key == naive else "" }}>
		  <taxon idref="{{ key }}"/>
			{{ value }}
	  </sequence>
	{% endfor %}
	</alignment>

	<!-- The patterns from 1 to end                                              -->
	<!-- npatterns={{ id_seq[naive]|length }}                                                           -->
	<patterns id="patterns" from="1" unique="false">
	  <alignment idref="alignment"/>
	</patterns>

	<!-- A prior on the distribution node heights defined given                  -->

	<!-- Stadler, T; On incomplete sampling under birth-death models and connections to the sampling-based coalescent;
	JOURNAL OF THEORETICAL BIOLOGY (2009) 261:58-66-->
	<birthDeathSamplingModel id="birthDeath" units="years">
	  <birthMinusDeathRate>
	    <parameter id="birthDeath.meanGrowthRate" value="0.01" lower="0.0"/>
	  </birthMinusDeathRate>
	  <relativeDeathRate>
	    <parameter id="birthDeath.relativeDeathRate" value="0.0" lower="0.0"/>
	  </relativeDeathRate>
	  <sampleProbability>
	    <parameter id="birthDeath.sampleProbability" value="1.0" lower="0.0" upper="1.0"/>
	  </sampleProbability>
	  <origin>
	    <parameter id="birthDeath.origin" value="0.0" lower="0.0"/>
	  </origin>
	</birthDeathSamplingModel>

	<!-- This is a simple constant population size coalescent model              -->
	<!-- that is used to generate an initial tree for the chain.                 -->
	<constantSize id="initialDemo" units="years">
	  <populationSize>
	    <parameter id="initialDemo.popSize" value="100.0"/>
	  </populationSize>
	</constantSize>

	<!-- Generate a random starting tree under the coalescent process            -->
	<coalescentSimulator id="startingTree">
	  <coalescentSimulator>
	    <taxa idref="ingroup"/>
	    <constantSize idref="initialDemo"/>
	  </coalescentSimulator>
	  <taxa idref="taxa"/>
	  <constantSize idref="initialDemo"/>
	</coalescentSimulator>

	<!-- Generate a tree model                                                   -->
	<treeModel id="treeModel">
	  <coalescentTree idref="startingTree"/>
	  <rootHeight>
	    <parameter id="treeModel.rootHeight"/>
	  </rootHeight>
	  <nodeHeights internalNodes="true">
	    <parameter id="treeModel.internalNodeHeights"/>
	  </nodeHeights>
	  <nodeHeights internalNodes="true" rootNode="true">
	    <parameter id="treeModel.allInternalNodeHeights"/>
	  </nodeHeights>
	  <leafHeight taxon="{{ naive }}">
	    <parameter id="age({{ naive }})"/>
	  </leafHeight>
	</treeModel>

	<!-- Taxon Sets                                                              -->
	<tmrcaStatistic id="tmrca(ingroup)" includeStem="false">
	  <mrca>
	    <taxa idref="ingroup"/>
	  </mrca>
	  <treeModel idref="treeModel"/>
	</tmrcaStatistic>

	<!-- Generate a speciation likelihood for Yule or Birth Death                -->
	<hlPrior id="hlPrior">
	  <birthDeathSamplingModel idref="birthDeath"/>
	  <treeModel idref="treeModel"/>
	  <taxon idref="{{ naive }}"/>
	</hlPrior>

	<!-- The strict clock (Uniform rates across branches)                        -->
	<strictClockBranchRates id="branchRates">
	  <rate>
	    <parameter id="clock.rate" value="1.0"/>
	  </rate>
	</strictClockBranchRates>
	<rateStatistic id="meanRate" name="meanRate" mode="mean" internal="true" external="true">
	  <treeModel idref="treeModel"/>
	  <strictClockBranchRates idref="branchRates"/>
	</rateStatistic>

	<!-- The JC substitution model (Jukes & Cantor, 1969)                        -->
	<HKYModel id="jc">
	  <frequencies>
	    <frequencyModel id="freqModel" dataType="nucleotide">
	      <frequencies>
	        <parameter id="frequencies" value="0.25 0.25 0.25 0.25"/>
	      </frequencies>
	    </frequencyModel>
	  </frequencies>
	  <kappa>
	    <parameter value="1.0"/>
	  </kappa>
	</HKYModel>

	<!-- site model                                                              -->
	<siteModel id="siteModel">
	  <substitutionModel>
	    <HKYModel idref="jc"/>
	  </substitutionModel>
	  <relativeRate>
	    <parameter id="mu" value="1.0" lower="0.0"/>
	  </relativeRate>
	  <gammaShape gammaCategories="4">
	    <parameter id="alpha" value="0.5" lower="0.0"/>
	  </gammaShape>
	</siteModel>

	<!-- Likelihood for tree given sequence data                                 -->
	<ancestralTreeLikelihood id="treeLikelihood" useAmbiguities="false" stateTagName="states">
	  <patterns idref="patterns"/>
	  <treeModel idref="treeModel"/>
	  <siteModel idref="siteModel"/>
	  <strictClockBranchRates idref="branchRates"/>
	</ancestralTreeLikelihood>

	{% if naive_correction %}
	<amritCorrection id="correction">
	  <treeModel idref="treeModel"/>
	  <frequencyModel idref="freqModel"/>
	  <sequence idref="{{ naive }}seq"/>
	</amritCorrection>
	{% endif %}

	<!-- Define operators                                                        -->
	<operators id="operators" optimizationSchedule="default">
	  <scaleOperator scaleFactor="0.75" weight="1">
	    <parameter idref="alpha"/>
	  </scaleOperator>
	  <subtreeSlide size="1.0" gaussian="true" weight="15">
	    <treeModel idref="treeModel"/>
	  </subtreeSlide>
	  <narrowExchange weight="15">
	    <treeModel idref="treeModel"/>
	  </narrowExchange>
	  <wideExchange weight="3">
	    <treeModel idref="treeModel"/>
	  </wideExchange>
	  <wilsonBalding weight="3">
	    <treeModel idref="treeModel"/>
	  </wilsonBalding>
	  <scaleOperator scaleFactor="0.75" weight="3">
	    <parameter idref="treeModel.rootHeight"/>
	  </scaleOperator>
	  <uniformOperator weight="30">
	    <parameter idref="treeModel.internalNodeHeights"/>
	  </uniformOperator>
	  <scaleOperator scaleFactor="0.75" weight="3">
	    <parameter idref="birthDeath.meanGrowthRate"/>
	  </scaleOperator>
	  <!-- <scaleOperator scaleFactor="0.75" weight="3">
	    <parameter idref="birthDeath.relativeDeathRate"/>
	  </scaleOperator>
	  <scaleOperator scaleFactor="0.75" weight="3">
	    <parameter idref="birthDeath.sampleProbability"/>
	  </scaleOperator> -->
	  <randomWalkOperator windowSize="0.1" weight="3" boundaryCondition="absorbing">
	    <parameter idref="age({{ naive }})"/>
	  </randomWalkOperator>
	</operators>

	<!-- Define MCMC                                                             -->
	<mcmc id="mcmc" chainLength="{{ iter }}" autoOptimize="true" operatorAnalysis="{{ basename }}.ops">
	  <posterior id="posterior">
	    <prior id="prior">
	      <exponentialPrior mean="0.5" offset="0.0">
	        <parameter idref="alpha"/>
	      </exponentialPrior>
	      <uniformPrior lower="0.0" upper="100000.0">
	        <parameter idref="birthDeath.meanGrowthRate"/>
	      </uniformPrior>
	      <uniformPrior lower="0.0" upper="1.0">
	        <parameter idref="birthDeath.relativeDeathRate"/>
	      </uniformPrior>
	      <!-- <betaPrior shape="1.0" shapeB="1.0" offset="0.0">
	        <parameter idref="birthDeath.sampleProbability"/>
	      </betaPrior> -->
	      <hlPrior idref="hlPrior"/>
	      <strictClockBranchRates idref="branchRates"/>
	    </prior>
	    <likelihood id="likelihood">
				{% if naive_correction %}
	      <amritCorrection idref="correction"/>
				{% endif %}
	      <ancestralTreeLikelihood idref="treeLikelihood"/>
	    </likelihood>
	  </posterior>
	  <operators idref="operators"/>

	  <!-- write log to screen                                                     -->
	  <log id="screenLog" logEvery="{{ thin }}">
	    <column label="Posterior" dp="4" width="12">
	      <posterior idref="posterior"/>
	    </column>
	    <column label="Prior" dp="4" width="12">
	      <prior idref="prior"/>
	    </column>
	    <column label="Likelihood" dp="4" width="12">
	      <likelihood idref="likelihood"/>
	    </column>
	    <column label="rootHeight" sf="6" width="12">
	      <parameter idref="treeModel.rootHeight"/>
	    </column>
	  </log>

	  <!-- write log to file                                                       -->
	  <log id="fileLog" logEvery="{{ thin }}" fileName="{{ basename }}.log" overwrite="false">
	    <posterior idref="posterior"/>
	    <prior idref="prior"/>
	    <likelihood idref="likelihood"/>
	    <parameter idref="treeModel.rootHeight"/>
	    <tmrcaStatistic idref="tmrca(ingroup)"/>
	    <parameter idref="birthDeath.meanGrowthRate"/>
	    <parameter idref="birthDeath.relativeDeathRate"/>
	    <parameter idref="birthDeath.sampleProbability"/>
	    <parameter idref="alpha"/>
	    <parameter idref="clock.rate"/>
	    <rateStatistic idref="meanRate"/>
	    <ancestralTreeLikelihood idref="treeLikelihood"/>
	    <strictClockBranchRates idref="branchRates"/>
	    <hlPrior idref="hlPrior"/>
	  </log>

	  <!-- write tree log to file                                                  -->
	  <logTree id="treeFileLog" logEvery="{{ thin }}" nexusFormat="true" fileName="{{ basename }}.trees" sortTranslationTable="true">
	    <treeModel idref="treeModel"/>
	    <!-- <trait name="rate" tag="rate">
	      <strictClockBranchRates idref="branchRates"/>
	    </trait> -->
	    <posterior idref="posterior"/>

	    <!-- START Ancestral state reconstruction                                    -->
	    <trait name="states" tag="ancestral">
	      <ancestralTreeLikelihood idref="treeLikelihood"/>
	    </trait>

	    <!-- END Ancestral state reconstruction                                      -->

	  </logTree>
	</mcmc>
	<report>
	  <property name="timer">
	    <mcmc idref="mcmc"/>
	  </property>
	</report>
</beast>

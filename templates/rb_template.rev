################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a GTR+Gamma+Inv
#                   substitution model on a single gene.
#
# authors: Sebastian Hoehna, Michael Landis, and Tracy A. Heath
#
################################################################################

seed(1)

### Read in sequence data for the gene
data = readDiscreteCharacterData("{{ fasta_path }}")

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
n_branches <- 2 * n_species - 3
taxa <- data.taxa()


mvi = 1
mni = 1


######################
# Substitution Model #
######################

# specify the stationary frequency parameters
pi_prior <- v(1,1,1,1)
pi ~ dnDirichlet(pi_prior)
moves[mvi++] = mvBetaSimplex(pi, weight=1.0)
moves[mvi++] = mvDirichletSimplex(pi, weight=1.0)


# specify the exchangeability rate parameters
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[mvi++] = mvBetaSimplex(er, weight=1.0)
moves[mvi++] = mvDirichletSimplex(er, weight=1.0)


# create a deterministic variable for the rate matrix, GTR
Q := fnGTR(er,pi)


#############################
# Among Site Rate Variation #
#############################

# among site rate variation, +Gamma4
alpha ~ dnExponential(1)
sr := fnDiscretizeGamma( alpha, alpha, 4, false )
moves[mvi++] = mvScaleBactrian(alpha, weight=1.0)




##############
# Tree model #
##############

# Prior distribution on the tree topology
outgroup = clade("{{ naive }}")
topology ~ dnUniformTopology(taxa, outgroup=outgroup, rooted=false)
moves[mvi++] = mvNNI(topology, weight=1.0)
moves[mvi++] = mvSPR(topology, weight=1.0)

# Branch length prior
for (i in 1:n_branches) {
    bl[i] ~ dnExponential(10.0)
    moves[mvi++] = mvScaleBactrian(bl[i], weight=1.0)
}

TL := sum(bl)

psi := treeAssembly(topology, bl)




###################
# PhyloCTMC Model #
###################

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, siteRates=sr, type="DNA", treatAmbiguousAsGap=TRUE)

# attach the data
seq.clamp(data)


############
# Analysis #
############

mymodel = model(psi)

# add monitors
printgen = {{ thin }}
monitors[mni++] = mnScreen(printgen=printgen)
monitors[mni++] = mnFile(psi, filename="{{ basename }}.trees",
                         printgen=printgen, separator=TAB)
monitors[mni++] = mnModel(filename="{{ basename }}.log",
                          printgen=printgen, separator=TAB)
######monitors[mni++] = mnAncestralState(tree=psi, ctmc=seq,
######                                   filename="{{ basename }}.ancestral_states.log",
######                                   type="DNA", printgen=printgen, separator=TAB)
monitors[mni++] = mnJointConditionalAncestralState(tree=psi, ctmc=seq,
                                                   filename="{{ basename }}.ancestral_states.log",
                                                   type="DNA", printgen=printgen, separator=TAB)


# run the analysis
mymcmc = mcmc(mymodel, monitors, moves, nruns=1)
mymcmc.burnin(floor({{ 0.05 * iter }}), floor({{ 0.5 * thin }}))
mymcmc.run({{ iter }})
######mymcmc.operatorSummary()


###### summarize output
######treetrace = readTreeTrace("output/primates_cytb_GTRGI.trees",
######                          separator=TAB, burnin=0.25)
######treetrace.summarize()
######asrtrace = readAncestralStateTrace("output/primates_cytb_GTRGI.ancestral_states.log", separator=TAB)
###### and then get the MAP tree
######map_tree = mapTree(treetrace,"output/primates_cytb_GTRGI_MAP.tre")


###### ASR summary tree?
######asr_tree = ancestralStateTree(map_tree,ancestral_state_trace_vector=asrtrace,tree_trace=treetrace,
######                              "output/asr.tre",burnin=0)

quit()
